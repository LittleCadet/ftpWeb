# 设置日志级别
log4j.rootLogger=error,consoleAppender,D,E

# 将日志输出到控制台
# log4j.appender.consoleAppender=org.apache.log4j.ConsoleAppender

# 配置日志信息的格式【灵活的指定布局格式】
# log4j.appender.consoleAppender.layout=org.apache.log4j.PatternLayout
# log4j.appender.consoleAppender.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss,SSS} [%l]-[%p] %m%n


# debug日志的设置
# 1.org.apache.log4j.ConsoleAppender（控制台）
# 2.org.apache.log4j.FileAppender（文件）
# 3.org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
# 4.org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
# 5.org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
log4j.appender.D=org.apache.log4j.RollingFileAppender
log4j.appender.D.File=D:\\fxDownload\\logs\\debug\\ftpWeb_debug.log

# 默认值true,将消息追加到指定文件中，false时：将消息覆盖指定文件内容
log4j.appender.D.Append = true

#指定日志输出的最低级别
log4j.appender.D.Threshold = DEBUG

#每天更换文件名时的命名规则
log4j.appender.D.DatePattern='.'yyyyMMdd

# 达到设置大小后，将会自动滚动【单位：MB/KB均可】
log4j.appender.D.MaxFileSize = 10mb

# 产生滚动文件的最大数
log4j.appender.D.MaxBackupIndex = 20
log4j.appender.D.layout=org.apache.log4j.PatternLayout

# %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}【精确到毫秒SSS】
# %t: 输出产生该日志事件的线程名
# %c: 输出日志信息所属的类目，通常就是所在类的全名
# %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
# %m: 输出代码中指定的消息,产生的日志具体信息
# %n: 输出一个回车换行符，Windows平台为”\r\n”，Unix平台为”\n”输出日志信息换行
log4j.appender.D.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} [%t] [%c] [%p] - %m%n
# log4j.appender.logfile.layout.ConversionPattern=%D{yyyy-MM-dd HH:mm:ss.SSS}|%X{level}|%X{moduleName}|%X{traceID}|%m|%X{appendInfo}|%X{exceptionMessage}| %X{fullInfo} %n




# error日志的设置
log4j.appender.E=org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File=D:\\fxDownload\\logs\\error\\ftpWeb_error.log

# 默认值true,将消息追加到指定文件中，false时：将消息覆盖指定文件内容
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR
log4j.appender.E.DatePattern='.'yyyy-MM-dd

# 达到设置大小后，将会自动滚动
log4j.appender.E.MaxFileSize = 10MB

# 产生滚动文件的最大数
log4j.appender.E.MaxBackupIndex = 20
log4j.appender.E.layout=org.apache.log4j.PatternLayout

# %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}【精确到毫秒SSS】
# %t: 输出产生该日志事件的线程名
# %c: 输出日志信息所属的类目，通常就是所在类的全名
# %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
# %m: 输出代码中指定的消息,产生的日志具体信息
# %n: 输出一个回车换行符，Windows平台为”\r\n”，Unix平台为”\n”输出日志信息换行
log4j.appender.E.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} [%t] [%c] [%p] - %m%n