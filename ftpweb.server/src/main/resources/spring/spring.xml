<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">

    <!-- mvc注解驱动 -->
    <mvc:annotation-driven />

    <!-- 加载properties -->
    <context:property-placeholder location="classpath*:*.properties"/>


    <!-- 扫描component -->
    <context:component-scan base-package="com.myproj"/>

    <!-- properties文件解密，重新放入xml中-->
    <bean id="propertyConfigurer" class="com.myproj.config.PasswordEncryptConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <value>/jdbc.properties</value>
            </list>
        </property>
    </bean>

    <!-- 引入数据源 -->
    <bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          p:driverClass="${jdbc.driver}" p:jdbcUrl="${jdbc.url}" p:user="${jdbc.username}"
          p:password="${jdbc.password}"/>

    <!-- 添加sqlSessionFactoryBean -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean"
          p:dataSource-ref="datasource"/>
    <!-- 扫描dao，创建sqlsession对象，之后引入了Mapper.xml文件，并 调用其中的增删改查方法 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:basePackage="com.myproj.dao" p:sqlSessionFactoryBeanName="sqlSessionFactoryBean"/>

    <bean id="ftpDelete" class="com.myproj.ftp.FtpDelete">
        <!--<property name="remoteDeleteFilePath" value="${remoteDeleteFilePath}"/>-->
    </bean>

    <bean id="ftpDownload" class="com.myproj.ftp.FtpDownload">
        <!--<property name="remoteDownloadFilePath" value="${remoteDownloadFilePath}"/>
        <property name="localDownloadFilePath" value="${localDownloadFilePath}"/>-->
    </bean>

    <bean id="ftpUpload" class="com.myproj.ftp.FtpUpload">
        <!--<property name="remoteUploadFilePath" value="${remoteUploadFilePath}"/>
        <property name="localUploadFilePath" value="${localUploadFilePath}"/>-->
    </bean>

    <bean id = "ftpBatchUpload" class="com.myproj.ftp.FtpBatchUpload">
        <property name="batchUploadFilePath" value="${batchUploadFilePath}"/>
    </bean>

    <bean id = "ftpBatchDelete" class="com.myproj.ftp.FtpBatchDelete">
        <property name="batchDeleteFilePath" value="${batchDeleteFilePath}"/>
    </bean>

    <bean id = "ftpBatchDownload" class="com.myproj.ftp.FtpBatchDownload">
        <property name="batchDownloadFilePath" value="${batchDownloadFilePath}"/>
    </bean>

    <bean id="scanDirectory" class="com.myproj.ftp.ScanDirectory">
        <property name="remoteDownloadFilePath" value="${remoteDownloadFilePath}"/>
    </bean>

    <bean id="ftpUtil" class="com.myproj.tools.FtpUtil">
        <!--<property name="host" value="${host}"/>
        <property name="account" value="${account}"/>
        <property name="password" value="${password}"/>-->
        <property name="timeOut" value="${timeOut}"/>
        <property name="reTryTimes" value="${reTryTimes}"/>
    </bean>

    <bean id = "registerService" class="com.myproj.serviceimpl.RegisterServiceImpl">
        <property name="childNodePath" value="${zookeeper.childNodePath}" />
        <property name="serviceName" value="${zookeeper.serviceName}" />
    </bean>

    <bean id = "curatorClient" class="com.myproj.entity.CuratorClient"/>

    <!-- 先配置job1-->
    <bean name="ftpDownloadJobBean" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="ftpDownload"/>
        <property name="targetMethod" value="download"/>
        <property name="concurrent" value="false"/>
    </bean>

    <!--Quartz的定时任务1 的触发器 -->
    <bean id="ftpDownloadTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="ftpDownloadJobBean">
        </property>
        <property name="cronExpression" value="${download.cronExpression}" />
    </bean>

    <!-- 先配置job2-->
    <bean name="scanDirectoryJobBean" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="scanDirectory"/>
        <property name="targetMethod" value="scan"/>
        <property name="concurrent" value="false"/>
    </bean>

    <!--Quartz的定时任务2 的触发器 -->
    <bean id="scanDirectoryrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="scanDirectoryJobBean"/>
        <property name="cronExpression" value="${scan.cronExpression}" />
    </bean>

    <!-- 先配置job3-->
    <bean name="ftpUploadJobBean" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="ftpUpload"/>
        <property name="targetMethod" value="upload"/>
        <property name="concurrent" value="false"/>
    </bean>

    <!--Quartz的定时任务3的触发器 -->
    <bean id="ftpUploadTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="ftpUploadJobBean">
        </property>
        <property name="cronExpression" value="${upload.cronExpression}" />
    </bean>

    <!-- 中心调度器-->
    <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" autowire="no">
        <property name="triggers">
            <list>
                <!-- 执行定时下载服务器上文件-->
                <ref bean="ftpDownloadTrigger" />

                <!-- 执行定时上传到服务器-->
                <ref bean="ftpUploadTrigger" />

                <!-- 执行定时扫描服务器上的文件，一旦变动即可触发下载任务-->
                <ref bean="scanDirectoryrigger" />
            </list>
        </property>
    </bean>

    <!-- 出现报错：通配符的匹配很全面, 但无法找到元素 'mvc:annotation-driven' 的声明-->
    <!--json解析器配置-->
    <!--将字符串转换为json-->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean id="stringConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <!-- 这里顺序不能反，一定先写text/html,不然ie下出现下载提示 -->
                            <value>text/html;charset=UTF-8</value>
                            <value>application/json;charset=UTF-8</value>
                            <value>text/plain;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
                <bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <!-- 这里顺序不能反，一定先写text/html,不然ie下出现下载提示 -->
                            <value>text/html;charset=UTF-8</value>
                            <value>application/json;charset=UTF-8</value>
                            <value>text/plain;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

</beans>
