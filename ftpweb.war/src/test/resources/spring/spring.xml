<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- mvc注解驱动 -->
    <mvc:annotation-driven />

    <!-- 加载properties -->
    <context:property-placeholder location="classpath*:*.properties"/>


    <!-- 扫描component -->
    <context:component-scan base-package="com.myproj"/>

    <bean id = "enCodeFromPropertiesTest" class="ftpTest.EnCodeFromPropertiesTest">
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <bean id="dataSourcePostProcessor"
          class="com.myproj.config.DataSourcePostProcessor"
          lazy-init="true">
        <property name="config">
            <value>classpath:encrypt.properties</value>
        </property>
    </bean>

    <!-- datasource start -->
    <bean id="datasource"
          class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="filters" value="${filters}" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${maxActive}" />
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${initialSize}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${maxWait}" />
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${minIdle}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis"
                  value="${timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis"
                  value="${minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${validationQuery}" />
        <property name="testWhileIdle" value="${testWhileIdle}" />
        <property name="testOnBorrow" value="${testOnBorrow}" />
        <property name="testOnReturn" value="${testOnReturn}" />
        <property name="maxOpenPreparedStatements"
                  value="${maxOpenPreparedStatements}" />
        <!-- 打开 removeAbandoned 功能 -->
        <property name="removeAbandoned" value="${removeAbandoned}" />
        <!-- 1800 秒，也就是 30 分钟 -->
        <property name="removeAbandonedTimeout"
                  value="${removeAbandonedTimeout}" />
        <!-- 关闭 abanded 连接时输出错误日志 -->
        <property name="logAbandoned" value="${logAbandoned}" />
        <!--数据库解密 -->
        <property name="passwordCallback"
                  ref="dataSourcePostProcessor" />
        <property name="connectProperties"
                  value="password=${jdbc.password}" />

        <!--慢sql日志打印-->
        <property name="proxyFilters">
            <list>
                <ref bean="logFilter"/>
                <ref bean="statFilter" />
            </list>
        </property>
    </bean>

    <!--慢sql日志打印-->
    <bean id="statFilter" class="com.alibaba.druid.filter.stat.StatFilter" >
        <property name="mergeSql" value="true" />
        <property name="logSlowSql" value="true" />
        <property name="slowSqlMillis" value="${slowSqlMillis}" />
    </bean>

    <!--慢sql日志打印-->
    <bean id="logFilter"
          class="com.alibaba.druid.filter.logging.Log4jFilter">
    </bean>

    <!-- 添加sqlSessionFactoryBean -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean"
          p:dataSource-ref="datasource"/>
    <!-- 扫描dao，创建sqlsession对象，之后引入了Mapper.xml文件，并 调用其中的增删改查方法 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:basePackage="com.myproj.dao" p:sqlSessionFactoryBeanName="sqlSessionFactoryBean"/>

    <bean id="ftpDelete" class="com.myproj.ftp.FtpDelete">
        <property name="remoteDeleteFilePath" value="${remoteDeleteFilePath}"/>
    </bean>

    <bean id="ftpDownload" class="com.myproj.ftp.FtpDownload">
        <property name="remoteDownloadFilePath" value="${remoteDownloadFilePath}"/>
        <property name="localDownloadFilePath" value="${localDownloadFilePath}"/>
    </bean>

    <bean id="ftpUpload" class="com.myproj.ftp.FtpUpload">
        <property name="remoteUploadFilePath" value="${remoteUploadFilePath}"/>
        <property name="localUploadFilePath" value="${localUploadFilePath}"/>
    </bean>

    <bean id = "ftpBatchUpload" class="com.myproj.ftp.FtpBatchUpload">
        <property name="batchUploadFilePath" value="${batchUploadFilePath}"/>
    </bean>

    <bean id = "ftpBatchDelete" class="com.myproj.ftp.FtpBatchDelete">
        <property name="batchDeleteFilePath" value="${batchDeleteFilePath}"/>
    </bean>

    <bean id = "ftpBatchDownload" class="com.myproj.ftp.FtpBatchDownload">
        <property name="batchDownloadFilePath" value="${batchDownloadFilePath}"/>
    </bean>

    <bean id="scanDirectory" class="com.myproj.ftp.ScanDirectory">
        <property name="remoteDownloadFilePath" value="${remoteDownloadFilePath}"/>
    </bean>

    <bean id="ftpUtil" class="com.myproj.tools.FtpUtil">
        <property name="host" value="${host}"/>
        <property name="account" value="${account}"/>
        <property name="password" value="${password}"/>
        <property name="timeOut" value="${timeOut}"/>
        <property name="reTryTimes" value="${reTryTimes}"/>
    </bean>

    <bean id = "uploadService" class = "com.myproj.serviceimpl.UploadServcieImpl"/>

    <bean id = "downloadService" class="com.myproj.serviceimpl.DownloadServiceImpl"/>

    <bean id = "deleteService" class="com.myproj.serviceimpl.DeleteServiceImpl"/>

    <bean id = "scanService" class="com.myproj.serviceimpl.ScanServiceImpl"/>

    <bean id = "curatorClient"  class = "com.myproj.entity.CuratorClient">
        <property name="zkServer" value="${zookeeper.zkServer}" />
        <property name="port" value="${zookeeper.port}" />
        <property name="rootNode" value="${zookeeper.rootNode}" />
        <property name="reTryTimes" value="${zookeeper.reTryTimes}" />
        <property name="sessionTimeOutMs" value="${zookeeper.sessionTimeOutMs}" />
        <property name="connectTimeOutMs" value="${zookeeper.connectTimeOutMs}" />
        <property name="baseSleepTimeMs" value="${zookeeper.baseSleepTimeMs}" />
    </bean>

    <bean id = "registerService" class="com.myproj.serviceimpl.RegisterServiceImpl">
        <property name="childNodePath" value="${zookeeper.childNodePath}" />
        <property name="serviceName" value="${zookeeper.serviceName}" />
    </bean>

    <!-- 先配置job1-->
    <bean name="ftpDownloadJobBean" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="ftpDownload"/>
        <property name="targetMethod" value="download"/>
        <property name="concurrent" value="false"/>
    </bean>

    <!--Quartz的定时任务1 的触发器 -->
    <bean id="ftpDownloadTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="ftpDownloadJobBean">
        </property>
        <property name="cronExpression" value="${download.cronExpression}" />
    </bean>

    <!-- 先配置job2-->
    <bean name="scanDirectoryJobBean" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="scanDirectory"/>
        <property name="targetMethod" value="scan"/>
        <property name="concurrent" value="false"/>
    </bean>

    <!--Quartz的定时任务2 的触发器 -->
    <bean id="scanDirectoryrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="scanDirectoryJobBean"/>
        <property name="cronExpression" value="${scan.cronExpression}" />
    </bean>

    <!-- 先配置job3-->
    <bean name="ftpUploadJobBean" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="ftpUpload"/>
        <property name="targetMethod" value="upload"/>
        <property name="concurrent" value="false"/>
    </bean>

    <!--Quartz的定时任务3的触发器 -->
    <bean id="ftpUploadTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="ftpUploadJobBean">
        </property>
        <property name="cronExpression" value="${upload.cronExpression}" />
    </bean>

    <!-- 中心调度器-->
    <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" autowire="no">
        <property name="triggers">
            <list>
                <!-- 执行定时下载服务器上文件-->
                <!--<ref bean="ftpDownloadTrigger" />-->

                <!-- 执行定时上传到服务器-->
                <!--<ref bean="ftpUploadTrigger" />-->

                <!-- 执行定时扫描服务器上的文件，一旦变动即可触发下载任务-->
                <!--<ref bean="scanDirectoryrigger" />-->
            </list>
        </property>
    </bean>

    <!-- 出现报错：通配符的匹配很全面, 但无法找到元素 'mvc:annotation-driven' 的声明-->
    <!--json解析器配置-->
    <!--将字符串转换为json-->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean id="stringConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <!-- 这里顺序不能反，一定先写text/html,不然ie下出现下载提示 -->
                            <value>text/html;charset=UTF-8</value>
                            <value>application/json;charset=UTF-8</value>
                            <value>text/plain;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
                <bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <!-- 这里顺序不能反，一定先写text/html,不然ie下出现下载提示 -->
                            <value>text/html;charset=UTF-8</value>
                            <value>application/json;charset=UTF-8</value>
                            <value>text/plain;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

</beans>
